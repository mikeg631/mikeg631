diff --git a/arch/x86/entry/syscalls/syscall_64.tbl b/arch/x86/entry/syscalls/syscall_64.tbl
index e93ef0b..2a2fb53 100644
--- a/arch/x86/entry/syscalls/syscall_64.tbl
+++ b/arch/x86/entry/syscalls/syscall_64.tbl
@@ -338,7 +338,8 @@
 329	common	pkey_mprotect		sys_pkey_mprotect
 330	common	pkey_alloc		sys_pkey_alloc
 331	common	pkey_free		sys_pkey_free
-
+332	64	get_classification	sys_get_classification
+333	64	set_classification	sys_set_classification
 #
 # x32-specific system call numbers start at 512 to avoid cache impact
 # for native 64-bit operation.
diff --git a/fs/Makefile b/fs/Makefile
index f207d43..aa03ee6 100644
--- a/fs/Makefile
+++ b/fs/Makefile
@@ -5,7 +5,7 @@
 # Rewritten to use lists instead of if-statements.
 #
 
-obj-y :=	open.o read_write.o file_table.o super.o \
+obj-y :=	classification.o open.o read_write.o file_table.o super.o \
 		char_dev.o stat.o exec.o pipe.o namei.o fcntl.o \
 		ioctl.o readdir.o select.o dcache.o inode.o \
 		attr.o bad_inode.o file.o filesystems.o namespace.o \
diff --git a/fs/classification.c b/fs/classification.c
new file mode 100644
index 0000000..23655aa
--- /dev/null
+++ b/fs/classification.c
@@ -0,0 +1,60 @@
+
+#include <linux/fs.h>
+#include <asm/segment.h>
+#include <asm/uaccess.h>
+#include <linux/buffer_head.h>
+#include <linux/vmalloc.h>
+#include <linux/mm.h>
+#include <linux/syscalls.h>
+#include <linux/printk.h>
+#include <linux/kernel.h>
+#include <linux/xattr.h>
+#include <linux/file.h>
+#include "classification.h"
+
+long sys_set_classification(int fd, int new_class)
+{
+struct fd f = fdget(fd);// using fd to get fd struct
+if (!f.file)//making sure that fdget got valid file
+        return -1;
+struct dentry *dentry = f.file->f_path.dentry;//grabbing dentry
+struct inode* inode = f.file->f_inode;//grabbing inode
+const int* temps = &new_class;// setaxxtr requires a const pointer
+int ret = __vfs_setxattr(dentry, inode, "user.classification", temps, 4, 0);// using setxattr to set an Extended attribute. The file should open  with write flag
+//If the file isn't open with write flag this will not work.
+
+if(ret != -1)//setxattr returns -1 on failure other wise it returns the number of bytes of the attribute
+{
+        return new_class;// return value set
+}
+return -1;//if we reach this point, the call failed
+}
+
+
+long sys_get_classification(int fd)
+{
+struct fd f = fdget(fd);//same as above
+if (!f.file)
+        return -1;
+struct dentry *dentry = f.file->f_path.dentry;
+struct inode* inode = f.file->f_inode;
+int* value = (int*) vmalloc (sizeof(int));// Need buffer to put value in
+int ret = __vfs_getxattr(dentry, inode, "user.classification", value, 4);//similar to above, but this time the file should be open with at least read flag
+int temp = *value;
+vfree(value);//free  buffer
+if(ret < 0)// getxattr returns positive ints on success, so this is a failure case
+{
+if(ret == -ENODATA)// if the File attribute does not exist , then this check should pass, so we will return 0 as a default value.
+{ 
+return 0;
+}
+else
+{
+return -1;//Another error occured. Most of these errors pretain to errors that would probably occur  during opening the file 
+//E2BIG, and ERANGE should not occur . As the above parameters are correct. So long as we are using Ext3 or Ext4, ENOTSUP should not occur
+}
+}
+return temp;// if we make it here, everything worked. Return retrieved value
+}
+
+
diff --git a/fs/classification.h b/fs/classification.h
new file mode 100644
index 0000000..1bb2433
--- /dev/null
+++ b/fs/classification.h
@@ -0,0 +1,3 @@
+asmlinkage long sys_get_classification(int fd);
+asmlinkage long sys_set_classification(int fd, int new_class);
+
diff --git a/include/linux/syscalls.h b/include/linux/syscalls.h
index 91a740f..c3bc5fb 100644
--- a/include/linux/syscalls.h
+++ b/include/linux/syscalls.h
@@ -903,4 +903,6 @@ asmlinkage long sys_pkey_mprotect(unsigned long start, size_t len,
 asmlinkage long sys_pkey_alloc(unsigned long flags, unsigned long init_val);
 asmlinkage long sys_pkey_free(int pkey);
 
+asmlinkage long sys_set_classification(int fd, int new_class);
+asmlinkage long sys_get_classification(int fd);
 #endif
