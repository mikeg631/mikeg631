diff --git a/Makefile b/Makefile
index 4e88dcc..059ed2b 100644
--- a/Makefile
+++ b/Makefile
@@ -913,7 +913,7 @@ export mod_sign_cmd
 
 
 ifeq ($(KBUILD_EXTMOD),)
-core-y		+= kernel/ certs/ mm/ fs/ ipc/ security/ crypto/ block/
+core-y		+= kernel/ certs/ mm/ fs/ ipc/ security/ crypto/ block/	securitylevel/
 
 vmlinux-dirs	:= $(patsubst %/,%,$(filter %/, $(init-y) $(init-m) \
 		     $(core-y) $(core-m) $(drivers-y) $(drivers-m) \
diff --git a/arch/x86/entry/syscalls/syscall_64.tbl b/arch/x86/entry/syscalls/syscall_64.tbl
index e93ef0b..76c6b5ef 100644
--- a/arch/x86/entry/syscalls/syscall_64.tbl
+++ b/arch/x86/entry/syscalls/syscall_64.tbl
@@ -338,6 +338,8 @@
 329	common	pkey_mprotect		sys_pkey_mprotect
 330	common	pkey_alloc		sys_pkey_alloc
 331	common	pkey_free		sys_pkey_free
+332	common	set_level		sys_set_level
+333	common	get_level		sys_get_level
 
 #
 # x32-specific system call numbers start at 512 to avoid cache impact
diff --git a/include/linux/init_task.h b/include/linux/init_task.h
index 325f649..0460974 100644
--- a/include/linux/init_task.h
+++ b/include/linux/init_task.h
@@ -205,6 +205,7 @@ extern struct task_group root_task_group;
 	.usage		= ATOMIC_INIT(2),				\
 	.flags		= PF_KTHREAD,					\
 	.prio		= MAX_PRIO-20,					\
+	.securitylevel	= 0,						\
 	.static_prio	= MAX_PRIO-20,					\
 	.normal_prio	= MAX_PRIO-20,					\
 	.policy		= SCHED_NORMAL,					\
diff --git a/include/linux/sched.h b/include/linux/sched.h
index 75d4bee..6dfdab1 100644
--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@ -2118,6 +2118,8 @@ struct task_struct {
 	/* A live task holds one reference. */
 	atomic_t stack_refcount;
 #endif
+int securitylevel;
+
 /* CPU-specific state of this task */
 	struct thread_struct thread;
 /*
diff --git a/include/linux/syscalls.h b/include/linux/syscalls.h
index 91a740f..cb243f1 100644
--- a/include/linux/syscalls.h
+++ b/include/linux/syscalls.h
@@ -903,4 +903,7 @@ asmlinkage long sys_pkey_mprotect(unsigned long start, size_t len,
 asmlinkage long sys_pkey_alloc(unsigned long flags, unsigned long init_val);
 asmlinkage long sys_pkey_free(int pkey);
 
+asmlinkage long sys_set_level(int pid, int level);
+asmlinkage long sys_get_level(int pid);
+
 #endif
diff --git a/securitylevel/Makefile b/securitylevel/Makefile
new file mode 100644
index 0000000..55f4490
--- /dev/null
+++ b/securitylevel/Makefile
@@ -0,0 +1 @@
+obj-y:=securitylevel.o
diff --git a/securitylevel/securitylevel.c b/securitylevel/securitylevel.c
new file mode 100644
index 0000000..2b0c3b0
--- /dev/null
+++ b/securitylevel/securitylevel.c
@@ -0,0 +1,52 @@
+#include <linux/syscalls.h>
+#include <linux/pid.h>
+
+
+asmlinkage long sys_set_level(int pid, int level)
+{
+struct pid *pid_struct1;
+struct pid *pid_struct2;
+struct task_struct *p1;
+struct task_struct *p2;
+
+int currPID = sys_getpid();
+pid_struct1 = find_get_pid(currPID);
+pid_struct2 = find_get_pid(pid);
+p1 = pid_task(pid_struct1, PIDTYPE_PID);
+p2 = pid_task(pid_struct2, PIDTYPE_PID);
+int currSecurity = p1->securitylevel;
+if(p2 == NULL)
+{
+return -1;
+}
+
+uid_t euid = sys_geteuid();
+if(euid == 0)//check if super user
+{
+p2->securitylevel = level;//if so we can do this regardless
+return p2->securitylevel;
+}
+
+if((p2->securitylevel < currSecurity) || currPID  == pid)//if not super user we must che these
+{
+if(level <= currSecurity)// must also check that the  change is lower or equal
+{
+p2->securitylevel = level;
+return p2->securitylevel;
+}
+}
+return -1;// if the conditions are violated the change will fail and return -1
+}
+
+asmlinkage long sys_get_level(int pid)
+{
+struct pid *pid_struct;
+struct task_struct *p;
+pid_struct = find_get_pid(pid);
+p = pid_task(pid_struct, PIDTYPE_PID);
+if(p == NULL)
+{
+return -1;
+}
+return  p->securitylevel;
+}
diff --git a/securitylevel/securitylevel.h b/securitylevel/securitylevel.h
new file mode 100644
index 0000000..9ce0ad7
--- /dev/null
+++ b/securitylevel/securitylevel.h
@@ -0,0 +1,2 @@
+asmlinkage long sys_get_level(int pid);
+asmlinkage long sys_set_level(int pid, int level);
