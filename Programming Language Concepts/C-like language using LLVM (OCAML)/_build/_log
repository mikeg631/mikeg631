### Starting build.
# Target: main.ml.depends, tags: { package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm_X86), extension:ml, file:main.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package llvm.all_backends -package llvm_X86 -package llvm.scalar_opts -package llvm.executionengine -package llvm.analysis -package llvm -modules main.ml > main.ml.depends # cached
# Target: ast.ml.depends, tags: { package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm_X86), extension:ml, file:ast.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package llvm.all_backends -package llvm_X86 -package llvm.scalar_opts -package llvm.executionengine -package llvm.analysis -package llvm -modules ast.ml > ast.ml.depends # cached
# Target: ast.cmo, tags: { package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm_X86), byte, compile, extension:cmo, extension:ml, file:ast.cmo, file:ast.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package llvm.all_backends -package llvm_X86 -package llvm.scalar_opts -package llvm.executionengine -package llvm.analysis -package llvm -o ast.cmo ast.ml # cached
# Target: codegen.ml.depends, tags: { package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm_X86), extension:ml, file:codegen.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package llvm.all_backends -package llvm_X86 -package llvm.scalar_opts -package llvm.executionengine -package llvm.analysis -package llvm -modules codegen.ml > codegen.ml.depends
# Target: lexer.mll, tags: { package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm_X86), extension:mll, file:lexer.mll, lexer, ocaml, ocamllex, quiet, traverse }
ocamllex.opt -q lexer.mll # cached
# Target: lexer.ml.depends, tags: { package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm_X86), extension:ml, file:lexer.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package llvm.all_backends -package llvm_X86 -package llvm.scalar_opts -package llvm.executionengine -package llvm.analysis -package llvm -modules lexer.ml > lexer.ml.depends # cached
# Target: parser.mly.depends, tags: { package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm_X86), extension:mly, file:parser.mly, infer, menhir_ocamldep, ocaml, ocamldep, quiet, traverse }
menhir --raw-depend --ocamldep 'ocamlfind ocamldep -modules' parser.mly > parser.mly.depends # cached
# Target: parser.mly, tags: { package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm_X86), byte, compile, extension:ml, extension:mly, file:parser.ml, file:parser.mly, infer, menhir, ocaml, parser, quiet, traverse }
menhir --ocamlc 'ocamlfind ocamlc -package llvm.all_backends -package llvm_X86 -package llvm.scalar_opts -package llvm.executionengine -package llvm.analysis -package llvm' --infer parser.mly # cached
# Target: parser.mli.depends, tags: { package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm_X86), extension:mli, file:parser.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package llvm.all_backends -package llvm_X86 -package llvm.scalar_opts -package llvm.executionengine -package llvm.analysis -package llvm -modules parser.mli > parser.mli.depends # cached
# Target: parser.cmi, tags: { package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm_X86), byte, compile, extension:mli, file:parser.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package llvm.all_backends -package llvm_X86 -package llvm.scalar_opts -package llvm.executionengine -package llvm.analysis -package llvm -o parser.cmi parser.mli # cached
# Target: codegen.cmo, tags: { package(llvm), package(llvm.all_backends), package(llvm.analysis), package(llvm.executionengine), package(llvm.scalar_opts), package(llvm_X86), byte, compile, extension:cmo, extension:ml, file:codegen.cmo, file:codegen.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package llvm.all_backends -package llvm_X86 -package llvm.scalar_opts -package llvm.executionengine -package llvm.analysis -package llvm -o codegen.cmo codegen.ml
+ ocamlfind ocamlc -c -package llvm.all_backends -package llvm_X86 -package llvm.scalar_opts -package llvm.executionengine -package llvm.analysis -package llvm -o codegen.cmo codegen.ml
File "codegen.ml", line 137, characters 4-31:
Warning 10: this expression should have type unit.
File "codegen.ml", line 141, characters 4-49:
Warning 10: this expression should have type unit.
File "codegen.ml", line 150, characters 30-37:
Error: Unbound value Int64.t
Command exited with code 2.
# Compilation unsuccessful.
